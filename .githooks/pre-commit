#!/usr/bin/env bash
# .githooks/pre-commit
# Enforces critical repository rules before commit

set -euo pipefail

echo "üîç Pre-commit: Validando reglas..."

# Branch enforcement: only main
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
  echo "‚ùå Solo se permite commitear en 'main' (rama actual: $CURRENT_BRANCH)"
  exit 1
fi

# Author identity enforcement
AUTHOR_NAME=$(git config user.name || echo "")
AUTHOR_EMAIL=$(git config user.email || echo "")
if [ "$AUTHOR_NAME" != "Ruben-Alvarez-Dev" ] || [ "$AUTHOR_EMAIL" != "ruben.alvarez.dev@gmail.com" ]; then
  echo "‚ùå FATAL: Autor inv√°lido. Debe ser Ruben-Alvarez-Dev <ruben.alvarez.dev@gmail.com>"
  exit 1
fi

# Directory rules
if grep -q "^/logs\|^logs/" .gitignore; then
  echo "‚ùå FATAL: /logs/ encontrado en .gitignore - DEBE commitearse"
  exit 1
fi

if grep -q "^/plan\|^plan/" .gitignore; then
  echo "‚ùå FATAL: /plan/ encontrado en .gitignore - DEBE commitearse"
  exit 1
fi

if ! grep -q "OLD_VERSION" .gitignore; then
  echo "‚ùå FATAL: OLD_VERSION no encontrado en .gitignore - DEBE ignorarse"
  exit 1
fi

# OLD_VERSION must not be in staged changes
if git diff --cached --name-only | grep -q "OLD_VERSION"; then
  echo "‚ùå FATAL: Detectados archivos en OLD_VERSION - NUNCA commitear OLD_VERSION"
  exit 1
fi

# Ensure there are staged changes
if git diff --cached --quiet; then
  echo "‚ùå No hay cambios staged para committear"
  exit 1
fi

# Significance check
CHANGED_LINES=$(git diff --cached --numstat | awk '{s+=$1+$2} END {print s+0}')
if [ "$CHANGED_LINES" -lt 3 ]; then
  echo "‚ùå Cambios muy peque√±os (<3 l√≠neas), aumenta el contenido antes de commitear"
  exit 1
fi

# ATLAS black-box compliance (prevent internal exposure)
if git diff --cached --name-only | grep -q "atlas"; then
  if git diff --cached | grep -qE "(ATLAS INTERNAL|atlas.*internal|atlas.*algorithm)"; then
    echo "‚ùå ATLAS internal documentation detected - black box violation"
    exit 1
  fi
fi

# Require checkpoint log when committing code changes
STAGED_FILES=$(git diff --cached --name-only)
CODE_CHANGED=$(echo "$STAGED_FILES" | grep -E '\.(py|js|ts|tsx|css|scss|yaml|yml)$' | grep -Ev '^(logs/)' || true)
if [ -n "$CODE_CHANGED" ]; then
  NEW_LOG=$(git diff --cached --name-only --diff-filter=A | grep -E '^logs/[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}_.+\.md$' || true)
  if [ -z "$NEW_LOG" ]; then
    echo "‚ùå Falta log de checkpoint en logs/YYYY-MM-DD_HHMMSS_X.Y.Z_keyword.md (a√±ade uno nuevo)"
    exit 1
  fi
fi

# Comment language: enforce English in code comments (basic heuristic)
SPANISH_DIACRITICS='[√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë]'
BAD_COMMENTS=false
# Python
if echo "$STAGED_FILES" | grep -E '\.py$' >/dev/null; then
  if git diff --cached -U0 -- '*.py' | grep -E "^\+\s*#.*$SPANISH_DIACRITICS" >/dev/null; then BAD_COMMENTS=true; fi
fi
# JS/TS/TSX single-line comments
if echo "$STAGED_FILES" | grep -E '\.(js|ts|tsx)$' >/dev/null; then
  if git diff --cached -U0 -- '*.js' '*.ts' '*.tsx' 2>/dev/null | grep -E "^\+\s*//(?!\s*http).*${SPANISH_DIACRITICS}" >/dev/null; then BAD_COMMENTS=true; fi
  # Block comments
  if git diff --cached -U0 -- '*.js' '*.ts' '*.tsx' 2>/dev/null | grep -E "^\+\s*(/\*|\*).*${SPANISH_DIACRITICS}" >/dev/null; then BAD_COMMENTS=true; fi
fi
# CSS/SCSS comments
if echo "$STAGED_FILES" | grep -E '\.(css|scss)$' >/dev/null; then
  if git diff --cached -U0 -- '*.css' '*.scss' 2>/dev/null | grep -E "^\+\s*(/\*|\*).*${SPANISH_DIACRITICS}" >/dev/null; then BAD_COMMENTS=true; fi
fi
if [ "$BAD_COMMENTS" = true ]; then
  echo "‚ùå Comentarios en espa√±ol detectados en cambios. Los comentarios t√©cnicos deben estar en ingl√©s."
  exit 1
fi

# Log messages must be in English (basic diacritics check)
BAD_LOGS=false
if echo "$STAGED_FILES" | grep -E '\.py$' >/dev/null; then
  if git diff --cached -U0 -- '*.py' 2>/dev/null | grep -E "^\+.*logging\.(debug|info|warning|error|critical)\(.*${SPANISH_DIACRITICS}" >/dev/null; then BAD_LOGS=true; fi
fi
if echo "$STAGED_FILES" | grep -E '\.(js|ts|tsx)$' >/dev/null; then
  if git diff --cached -U0 -- '*.js' '*.ts' '*.tsx' 2>/dev/null | grep -E "^\+.*console\.(log|info|warn|error)\(.*${SPANISH_DIACRITICS}" >/dev/null; then BAD_LOGS=true; fi
fi
if [ "$BAD_LOGS" = true ]; then
  echo "‚ùå Mensajes de log con caracteres no ingleses detectados. Los logs de sistema deben estar en ingl√©s."
  exit 1
fi

# TypeScript interfaces must start with I
if echo "$STAGED_FILES" | grep -E '\.(ts|tsx)$' >/dev/null; then
  if git diff --cached -U0 -- '*.ts' '*.tsx' 2>/dev/null | grep -E "^\+\s*interface\s+[A-HJ-Z]" >/dev/null; then
    echo "‚ùå Interfaces TypeScript deben usar prefijo 'I' (ej: interface IUserData)"
    exit 1
  fi
fi

# CSS BEM: disallow '.atlas_' (must be '.atlas-')
if echo "$STAGED_FILES" | grep -E '\.(css|scss)$' >/dev/null; then
  if git diff --cached -U0 -- '*.css' '*.scss' 2>/dev/null | grep -E "^\+.*\.atlas_" >/dev/null; then
    echo "‚ùå BEM/CSS: Usa '.atlas-' en lugar de '.atlas_' en clases CSS"
    exit 1
  fi
fi

# Optional format checks (run if tools available)
PY_CHANGED=$(echo "$STAGED_FILES" | grep -E '\.py$' || true)
if [ -n "$PY_CHANGED" ] && command -v black >/dev/null 2>&1; then
  echo "‚è≥ Black --check (python)"
  git diff --cached --name-only -- '*.py' | xargs -r black --check
fi

WEB_CHANGED=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|tsx|css|scss|md)$' || true)
if [ -n "$WEB_CHANGED" ] && command -v prettier >/dev/null 2>&1; then
  echo "‚è≥ Prettier --check (web)"
  git diff --cached --name-only -- '*.js' '*.ts' '*.tsx' '*.css' '*.scss' '*.md' 2>/dev/null | xargs -r prettier -c
fi

echo "‚úÖ Pre-commit: Validaciones OK"
exit 0

